"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã.
Module for working with product price data tables.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ / Main features:
- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö / Loading and processing price data
- –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω–∞–º / Price statistics calculation
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ / Report generation

Attributes:
    directory (Path): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö / Directory with data files
    names (dict): –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ / Dictionary for formatting product names
"""
import time
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
import pandas as pd
import os
import glob
from pandas import DataFrame

from parse_shop import get_query
from parse_prices import generate_cvs


from icecream import ic
ic.configureOutput(includeContext=True)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ / Directory where data files are stored
directory = Path('data', 'report')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ / Get list of files in directory
files = os.listdir(Path('data'))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —ç–º–æ–¥–∑–∏
# Dictionary for converting product names to readable format with emoji
names = {
    '–º–∞—Å–ª–æ': 'üßà –°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ, 180–≥—Ä',
    '–º–æ–ª–æ–∫–æ': 'ü•õ –ú–æ–ª–æ–∫–æ 2.5%, 1–ª',
    '—Ö–ª–µ–±': 'ü•ñ –•–ª–µ–± –±–µ–ª—ã–π (–±–∞—Ç–æ–Ω)',
    '–∫–æ–ª–±–∞—Å–∞': 'üå≠ –ö–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è, 400–≥',
    '–∫—Ä—É–ø–∞': 'üç≤ –ö—Ä—É–ø–∞ –≥—Ä–µ—á–Ω–µ–≤–∞—è, 800–≥',
    '—Å–∞—Ö–∞—Ä': 'üßÇ –°–∞—Ö–∞—Ä-–ø–µ—Å–æ–∫, 1–∫–≥',
    '—è–π—Ü–æ': 'ü•ö –Ø–π—Ü–æ 10—à—Ç',
    '—Ñ–∏–ª–µ': 'üçó –ö—É—Ä–∏—Ü–∞ —Ñ–∏–ª–µ, 1–∫–≥',
}


@dataclass
class Product:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.
    Class for storing product information.

    Attributes:
        name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ / Product name
        date (datetime): –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö / Data recording date
        middle_price (float): –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ / Average product price
        min_price (float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ / Minimum product price
    """
    name: str
    date: datetime
    middle_price: float
    min_price: float


def create_table():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏ –ø–æ —Ü–µ–Ω–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    Creates price report tables for each product.
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞ / Report structure:
    - –î–∞—Ç–∞ / Date
    - –ü—Ä–æ–¥—É–∫—Ç / Product
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ / Minimum price
    - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ / Average price
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    report_dir = Path('data', 'report')
    report_dir.mkdir(parents=True, exist_ok=True)
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è names
    for product_key, product_name in names.items():
        # –ò—â–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        search_patterns = [
            product_key,
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        product_dir: Path = None
        for pattern in search_patterns:
            for dir_name in os.listdir('data'):
                if pattern in dir_name.lower():
                    product_dir = (Path('data', dir_name))
        
        ic(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è {product_name}:", product_dir)
        
        if not product_dir:
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_name}")
            continue
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º
        all_data = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now().strftime('%d-%m-%Y')
        
        # –ò—â–µ–º CSV —Ñ–∞–π–ª—ã –≤–æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        if product_dir:
            csv_pattern = str(product_dir / 'cvs/*.csv')
            csv_files = glob.glob(csv_pattern)
            ic(f"CSV —Ñ–∞–π–ª—ã –≤ {product_dir}:", csv_files)
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö CSV —Ñ–∞–π–ª–æ–≤
            for csv_file in csv_files:
                try:
                    df = pd.read_csv(csv_file)
                    if not df.empty:
                        min_price = df['–¶–µ–Ω–∞'].min()
                        avg_price = df['–¶–µ–Ω–∞'].mean()
                        all_data.append({
                            '–î–∞—Ç–∞': current_date,
                            '–ü—Ä–æ–¥—É–∫—Ç': product_name,
                            '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': min_price,
                            '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': avg_price
                        })
                        ic(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª {csv_file}: min={min_price}, avg={avg_price}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {csv_file}: {e}")
                    continue
        
        if not all_data:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_name}")
            continue
            
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df_all = pd.DataFrame(all_data)
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        report_data = {
            '–î–∞—Ç–∞': current_date,
            '–ü—Ä–æ–¥—É–∫—Ç': product_name,
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': df_all['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞'].min(),
            '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': df_all['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'].mean()
        }
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
        report_file = report_dir / f"{product_key}.csv"
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if report_file.exists():
            df_existing = pd.read_csv(report_file)
            df_new = pd.DataFrame([report_data])
            df_combined = pd.concat([df_existing, df_new], ignore_index=True)
            df_combined.to_csv(report_file, index=False)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
            pd.DataFrame([report_data]).to_csv(report_file, index=False)
            
        print(f"–°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –¥–ª—è {product_name}")


def get_table(name: str) -> DataFrame:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    Gets data table for specified product.

    Args:
        name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∫–ª—é—á –∏–∑ —Å–ª–æ–≤–∞—Ä—è names) / Product name (key from names dictionary)

    Returns:
        DataFrame: –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç / Data table with product prices

    Raises:
        IndexError: –ï—Å–ª–∏ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω / If data file is not found
    """
    return pd.read_csv(Path(directory, name))


def get_product_from_table(table: DataFrame, index: int) -> Product:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
    Extracts product information from table at specified index.

    Args:
        table (DataFrame): –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö / Data table
        index (int): –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ / Row index in table

    Returns:
        Product: –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–≤–µ—Ä–Ω—ã–π / 
                Product object or None if index is invalid

    Raises:
        IndexError: –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç–∞–±–ª–∏—Ü—ã / If index is out of table bounds
    """
    try:
        row = table.iloc[index]
        product = Product(
            name=row['–ü—Ä–æ–¥—É–∫—Ç'],
            date=datetime.strptime(row['–î–∞—Ç–∞'], '%d-%m-%Y'),
            middle_price=float(row['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞']),
            min_price=float(row['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞'])
        )
        return product
    except IndexError as e:
        ic(e)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ / Error logging
        return None


def get_text_month(month: int):
    _dir = Path('data', 'report')

    text = []

    all_products_price = 0
    all_products_price_old = 0

    for file in _dir.iterdir():
        df = pd.read_csv(file)
        name = df['–ü—Ä–æ–¥—É–∫—Ç'][0]
        df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'], format='%d-%m-%Y')
        year = datetime.now().year
        filtered_data = df[(df['–î–∞—Ç–∞'].dt.month == month) & (df['–î–∞—Ç–∞'].dt.year == year)]
        middle_price = filtered_data['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'].mean()
        min_price = filtered_data['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞'].min()

        _new = float(filtered_data['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'].iloc[0])
        _old = float(filtered_data['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'].iloc[-1])

        all_products_price += float(filtered_data['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'].iloc[0])
        all_products_price_old += float(filtered_data['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'].iloc[-1])

        percent = (_new / (_old * 0.01)) - 100
        ic(percent)
        percent = round(percent, 1)

        text.append(
            f'<b>{name}</b>\n'
            f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ - <b>{str(round(middle_price, 2)).replace('.', ',')} —Ä. {["‚¨áÔ∏è ", "‚¨ÜÔ∏è +"][percent >= 0]}{percent}%</b>\n'
            f'Min {str(min_price).replace('.', ',')} p.\n\n'
        )

    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    percent_sum = 0
    try:
        percent_sum = (all_products_price / (all_products_price_old * 0.01)) - 100
    except ZeroDivisionError as e:
        ic(e)
    percent_sum = round(percent_sum, 1)
    separator = '_' * 32
    all_products_price = round(all_products_price, 2)
    all_products_price = str(all_products_price).replace('.', ',')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    summary_text = (
        f'<b>{separator}\n–°—É–º–º–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω—ã:</b>\n'
        f'üõí {all_products_price} —Ä. {["‚¨áÔ∏è ", "‚¨ÜÔ∏è +"][percent_sum >= 0]}{str(percent_sum).replace(".", ",")}%\n'
        f'{separator}\n\n'
    )

    text.insert(0, summary_text)  # –í—Å—Ç–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–æ

    result = ''.join(text)
    result += 'üìä –û—Ç—á–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö —Å–µ—Ç–µ–π –Ω–∞ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞.\n<i>–ú–∞–≥–∞–∑–∏–Ω —Ä–∞—Å–ø—Ä–æ–¥–∞–∂ <a href="https://fstok.ru/">FSTOK</a></i>'

    return result


def get_text() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã.
    Generates text report about product prices.

    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö /
             Text report with information about prices and changes

    Note:
        –û—Ç—á–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç: / Report includes:
        - –û–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω—ã / Total sum of product basket
        - –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã / Percentage change of total sum
        - –î–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É / Detailed information for each product
        - –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π / Emoji for visual representation of changes
    """
    text = []
    all_products_price_old = 0
    all_products_price = 0

    reports = os.listdir(directory)

    for name in reports:
        table = get_table(name)

        new_product = get_product_from_table(table, -1)  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
        old_product = get_product_from_table(table, -2)  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å

        percent = 0

        if new_product:
            all_products_price += new_product.middle_price

        if old_product:
            all_products_price_old += old_product.middle_price
            percent = (new_product.middle_price / (old_product.middle_price * 0.01)) - 100
            percent = round(percent, 1)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        text.append(
            f'<b>{new_product.name}</b>\n'
            f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ - <b>{str(round(new_product.middle_price, 2)).replace('.', ',')} —Ä.</b> {["‚¨áÔ∏è ", "‚¨ÜÔ∏è +"][percent >= 0]}{percent}%\n'
            f'Min {str(new_product.min_price).replace('.', ',')} p.\n\n'
        )

    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    percent_sum = 0
    try:
        percent_sum = (all_products_price / (all_products_price_old * 0.01)) - 100
    except ZeroDivisionError as e:
        ic(e)
    percent_sum = round(percent_sum, 1)
    separator = '_' * 32
    all_products_price = round(all_products_price, 2)
    all_products_price = str(all_products_price).replace('.', ',')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    summary_text = (
        f'<b>{separator}\n–°—É–º–º–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω—ã:</b>\n'
        f'üõí {all_products_price} —Ä. {["‚¨áÔ∏è ", "‚¨ÜÔ∏è +"][percent_sum >= 0]}{str(percent_sum).replace(".", ",")}%\n'
        f'{separator}\n\n'
    )

    text.insert(0, summary_text)  # –í—Å—Ç–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–æ

    result = ''.join(text)
    result += 'üìä –û—Ç—á–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö —Å–µ—Ç–µ–π –Ω–∞ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞.\n<i>–ú–∞–≥–∞–∑–∏–Ω —Ä–∞—Å–ø—Ä–æ–¥–∞–∂ <a href="https://fstok.ru/">FSTOK</a></i>'

    return result


def parse():
    queries = [
        '—Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ 180',
        '–º–æ–ª–æ–∫–æ —É–ª—å—Ç—Ä–∞–ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ',
        '—Ö–ª–µ–± –ø—à–µ–Ω–∏—á–Ω—ã–π',
        '–∫—Ä—É–ø–∞ –≥—Ä–µ—á–Ω–µ–≤–∞—è',
        '–∫–æ–ª–±–∞—Å–∞ –≤–∞—Ä–µ–Ω–∞—è 400',
        '—Å–∞—Ö–∞—Ä –ø–µ—Å–æ–∫ 1',
        '—è–π—Ü–æ 10',
        '—Ñ–∏–ª–µ –∫—É—Ä–∏–Ω–æ–µ'
    ]

    for query in queries:
        get_query(query)
        generate_cvs(query)

if __name__ == '__main__':
    parse()
    time.sleep(5)
    create_table()

